/*
* The MIT License (MIT)	 
*
* Copyright (c) 2015 LeanIX GmbH
* 
* Permission is hereby granted, free of charge, to any person obtaining a copy of
* this software and associated documentation files (the "Software"), to deal in
* the Software without restriction, including without limitation the rights to
* use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
* the Software, and to permit persons to whom the Software is furnished to do so,
* subject to the following conditions:
* 
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
* 
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
* FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
* COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
* IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
* CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

using System;
using System.Collections.Generic;
using {{invokerPackage}};
using LeanIX.Api.Models;
{{#imports}}
{{/imports}}

namespace {{package}} {
	{{#operations}}
	public class {{classname}} {
		private readonly ApiClient apiClient = ApiClient.GetInstance();

		public ApiClient getClient() {
			return apiClient;
		}

		{{#operation}}

		/// <summary>
		/// {{summary}} {{notes}}
		/// </summary>
		{{#allParams}}/// <param name="{{paramName}}">{{description}}</param>
		{{#hasMore}} {{/hasMore}}{{/allParams}}
		/// <returns></returns>
		public {{#returnType}}{{{returnType}}} {{/returnType}}{{^returnType}}void {{/returnType}} {{nickname}} ({{#allParams}}{{{dataType}}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) {
			// create path and map variables
			var path = "{{path}}".Replace("{format}","json"){{#pathParams}}.Replace("{" + "{{paramName}}" + "}", apiClient.escapeString({{{paramName}}}.ToString())){{/pathParams}};

			// query params
			var queryParams = new Dictionary<String, String>();
			var headerParams = new Dictionary<String, String>();

			{{#requiredParamCount}}
			// verify required params are set
			if ({{/requiredParamCount}}{{#requiredParams}} {{paramName}} == null {{#hasMore}}|| {{/hasMore}}{{/requiredParams}}{{#requiredParamCount}}) {
				throw new ApiException(400, "missing required params");
			}
			{{/requiredParamCount}}

			string paramStr = null;
			{{#queryParams}}if ({{paramName}} != null){
				paramStr = ({{paramName}} != null && {{paramName}} is DateTime) ? ((DateTime)(object){{paramName}}).ToString("u") : Convert.ToString({{paramName}});
				queryParams.Add("{{paramName}}", paramStr);
			}
			{{/queryParams}}

			{{#headerParams}}headerParams.Add("{{paramName}}", {{paramName}});
			{{/headerParams}}

			try {
				var response = apiClient.invokeAPI(path, "{{httpMethod}}", queryParams, {{#bodyParam}}{{bodyParam}}{{/bodyParam}}{{^bodyParam}}null{{/bodyParam}}, headerParams);
				if(response != null){
					return {{#returnType}}({{{returnType}}}) ApiClient.deserialize(response, typeof({{{returnType}}})){{/returnType}};
				}
				else {
					return {{#returnType}}null{{/returnType}};
				}
			} catch (ApiException ex) {
				if(ex.ErrorCode == 404) {
					return {{#returnType}} null{{/returnType}};
				}
				else {
					throw ex;
				}
			}
		}
		{{/operation}}
	}
	{{/operations}}
}